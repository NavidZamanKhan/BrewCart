✅ Day 1 – Foundation + Auth Screen (your first milestone)

Major goal: Setup Firebase + first auth screen.

Tools needed: flutterfire, firebase_auth, flutter_riverpod, go_router.

Tasks:

Run flutterfire configure and connect Firebase project.

Add firebase_core + firebase_auth dependencies.

Install go_router and stub out routes: /splash, /login, /signup, /home.

Add Riverpod providers for FirebaseAuth (authStateProvider).

Create basic login UI (email + password).

Test → run app, see if sign-in works and routes change.

✅ Day 2 – Signup + Auth Flow Polishing

Major goal: Full auth flow (login, signup, logout, redirect).

Tools: Firebase Auth + Firestore.

Tasks:

Add signup form → save user data into Firestore users collection.

Add password reset option.

Use Riverpod StreamProvider to listen to auth state.

Route guard with go_router: if user not logged in → /login, else /home.

Add a logout button (just for testing now).

✅ Day 3 – Home Screen + Catalog Layout

Major goal: Show product list (coffee menu mock).

Tools: freezed, cloud_firestore, Riverpod.

Tasks:

Define Product model with freezed (id, name, price, imageUrl).

Store 5–6 dummy products in Firestore products collection.

Fetch products with StreamProvider → display list/grid in home_screen.dart.

Style it a bit (cards with image + price).

Navigation: tap product → open ProductDetailsScreen.

✅ Day 4 – Cart Feature (Core UX)

Major goal: Add to cart & manage cart state.

Tools: Riverpod StateNotifierProvider.

Tasks:

Define CartItem model.

Create CartNotifier with StateNotifierProvider.

Add “+ Add to Cart” button on product details → updates cart state.

Show cart icon in app bar → badge with item count.

Create CartScreen route → list all cart items.

✅ Day 5 – Checkout (Minimal)

Major goal: Basic checkout flow.

Tools: Firestore.

Tasks:

Define Order model with freezed.

On checkout, push cart items into Firestore orders collection.

Clear cart after successful checkout.

Show simple confirmation screen (“Order placed!”).

✅ Day 6 – Polish & Animations

Major goal: Make it feel elegant.

Tools: animations package or flutter_animate.

Tasks:

Add fade/slide transitions between screens.

Add hero animation on coffee images → list → detail.

Improve typography/colors (use ThemeData with seedColor).

Add loading states with Riverpod (AsyncValue).

✅ Day 7 – Refactor & Clean

Major goal: Production-ready cleanup.

Tasks:

Separate UI + providers into clean folders (features/auth, features/cart, etc).

Use Repository pattern for Firebase calls.

Comment your code + push to GitHub.

Test whole flow: auth → home → add to cart → checkout → logout.


---------------------------------
Checkable Week 1 Task List
---------------------------------

- [ ] Day 1 – Foundation + Auth Screen
  - [ ] Run flutterfire configure and connect Firebase project
  - [ ] Add firebase_core + firebase_auth dependencies
  - [ ] Install go_router and stub routes: /splash, /login, /signup, /home
  - [ ] Add Riverpod providers for FirebaseAuth (authStateProvider)
  - [ ] Create basic login UI (email + password)
  - [ ] Test: run app, sign-in works, routes change based on auth

- [ ] Day 2 – Signup + Auth Flow Polishing
  - [ ] Add signup form
  - [ ] Save user data into Firestore users collection
  - [ ] Add password reset option
  - [ ] Use Riverpod StreamProvider to listen to auth state
  - [ ] Add go_router guard: unauth → /login, auth → /home
  - [ ] Add logout button (temporary/testing)

- [ ] Day 3 – Home Screen + Catalog Layout
  - [ ] Define Product model with freezed (id, name, price, imageUrl)
  - [ ] Seed 5–6 dummy products in Firestore products collection
  - [ ] Implement StreamProvider to fetch products
  - [ ] Build home_screen.dart list/grid UI (image + price cards)
  - [ ] Navigate: tap product → ProductDetailsScreen

- [ ] Day 4 – Cart Feature (Core UX)
  - [ ] Define CartItem model
  - [ ] Create CartNotifier with StateNotifierProvider
  - [ ] Product details: “+ Add to Cart” updates cart state
  - [ ] App bar: cart icon with badge shows item count
  - [ ] Create CartScreen that lists cart items

- [ ] Day 5 – Checkout (Minimal)
  - [ ] Define Order model with freezed
  - [ ] On checkout, write order to Firestore orders collection
  - [ ] Clear cart after successful checkout
  - [ ] Show confirmation screen (“Order placed!”)

- [ ] Day 6 – Polish & Animations
  - [ ] Add fade/slide transitions between screens
  - [ ] Add Hero animation on coffee images (list → detail)
  - [ ] Improve typography/colors (ThemeData seedColor)
  - [ ] Add loading states using Riverpod AsyncValue

- [ ] Day 7 – Refactor & Clean
  - [ ] Separate UI + providers into feature folders (features/auth, cart, etc.)
  - [ ] Apply Repository pattern for Firebase calls
  - [ ] Add comments and documentation; push to GitHub
  - [ ] Test full flow: auth → home → cart → checkout → logout
